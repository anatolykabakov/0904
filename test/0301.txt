'''
neatopylot_agent.py - agent code for Neato XV-11 Autopylot 

Copyright (C) 2014 Simon D. Levy

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as 
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public License 
along with this program.  If not, see <http://www.gnu.org/licenses/>
'''
import matplotlib.pyplot as plt
import math

from landmarks import find_landmarks
def scan2points(scan):
    points = []
    for i in scan:
        x = i[1]*math.cos(i[0]*3.14/180)
        y = i[1]*math.sin(i[0]*3.14/180)
        points.append((x,y))
    return points
def points2xy(points):
    x = []
    y = []
    for i in points:
            xp= i[0]
            yp= i[1]
            x.append(xp)
            y.append(yp)
    return x, y
class Neatopylot_Agent:
    
    def __init__(self):
        '''Initialize any attributes you need for your agent.
        '''
        pass
        
    def getAxes(self, scan, canvas):
        """Performs your agent's main work.
    
        Args:
            scan: A list of (degrees, distance) tuples.
            canvas: A breezypythongui.EasyCanvas object that you can draw on
    
        Returns:
            A tuple (axis_x, axis_y) for driving the XV-11.  Axis values should be
            in the inteval [-1,+1].
        """
        points=scan2points(scan)
        
        landmarks = find_landmarks(points)#вход [x y] скан выход [x y] особые точки   

        #------------------------

        points_map=scan2points(scan)
        x_map, y_map = points2xy(points_map)
        x_lm, y_lm = points2xy(landmarks)


        plt.plot(y_map, x_map, ".b")
        plt.plot(y_lm, x_lm, ".r")
        plt.pause(0.0001)

        
        
        # Default: turn around to the right
        return (0, 0)

